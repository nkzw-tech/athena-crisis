{
  "name": "@deities/athena-crisis",
  "version": "1.0.0",
  "private": true,
  "repository": {
    "type": "git",
    "url": "git://github.com/nkzw-tech/athena-crisis.git"
  },
  "author": "Christoph Nakazawa <christoph.pojer@gmail.com>",
  "type": "module",
  "scripts": {
    "ac": "node --no-warnings --experimental-specifier-resolution=node --loader ts-node/esm --env-file ./artemis/.env ./artemis/scripts/ac.tsx",
    "build-assets": "node --no-warnings --experimental-specifier-resolution=node --loader ts-node/esm --loader ./scripts/variant-loader.js --loader ./scripts/image-loader.js ./scripts/build-assets.tsx",
    "build-assets:force": "rm -rf node_modules **/node_modules && pnpm enable-canvas && pnpm install && pnpm dev:setup && pnpm build-assets && pnpm disable-canvas",
    "build:client": "rm -rf ./dist/ares && pnpm fbtee && pnpm vite build --outDir ../dist/ares -c ./ares/vite.config.ts ./ares/",
    "build:demo": "export IS_DEMO=1 && rm -rf ./dist/ares-demo && pnpm fbtee && pnpm vite build --outDir ../dist/ares-demo -c ./ares/vite.config.ts ./ares/",
    "build:docker-server": "RELEASE_ID=$(git rev-parse --short HEAD) docker buildx build --load -f Dockerfile --platform=linux/amd64 --tag athena-crisis --build-arg RELEASE_ID=$RELEASE_ID .",
    "build:docs": "cd docs && pnpm build --outDir ../../dist/deimos/open-source",
    "build:offline": "rm -rf ./dist/offline && pnpm vite build --outDir ../dist/offline -c ./offline/vite.config.ts ./offline; rm -rf mobile/dist/offline; mkdir mobile/dist; cp -R dist/offline mobile/dist/offline; rm -rf electron/offline; cp -R dist/offline electron/offline",
    "build:server": "./build-server",
    "build:splash": "rm -rf ./dist/deimos && pnpm vite build --outDir ../dist/deimos -c ./deimos/vite.config.ts ./deimos/ && pnpm build:docs",
    "build:steam-i18n": "rm -rf ./dist/steami18n && node --no-warnings --experimental-specifier-resolution=node --loader ts-node/esm ./ares/scripts/translateStorepage.js",
    "codegen": "node --no-warnings --experimental-specifier-resolution=node --loader ts-node/esm ./codegen/generate-all.tsx",
    "dev": "cd docs && pnpm dev",
    "dev:all": "npm-run-all --parallel dev:client dev:server",
    "dev:client": "./ares/ares.tsx",
    "dev:prisma-generate": "if [ -d artemis/prisma ]; then pnpm prisma generate; else exit 0; fi",
    "dev:server": "./artemis/artemis.tsx",
    "dev:setup": "pnpm dev:prisma-generate && pnpm relay && pnpm codegen && pnpm fbtee",
    "dev:update-deps": "rm -rf pnpm-lock.yaml node_modules/ **/node_modules && pnpm dev:setup",
    "disable-canvas": "jq '.pnpm |= (if has(\"onlyBuiltDependencies\") then .neverBuiltDependencies = .onlyBuiltDependencies | del(.onlyBuiltDependencies) else . end)' package.json > package.tmp.json && mv package.tmp.json package.json && git restore pnpm-lock.yaml",
    "enable-canvas": "jq '.pnpm |= (if has(\"neverBuiltDependencies\") then .onlyBuiltDependencies = .neverBuiltDependencies | del(.neverBuiltDependencies) else . end)' package.json > package.tmp.json && mv package.tmp.json package.json && canvasKey=$(yq e '.packages | keys' pnpm-lock.yaml | grep 'canvas@3\\.' | head -n 1 | sed 's/- //') && yq e \".packages[\\\"$canvasKey\\\"].requiresBuild = true\" -i pnpm-lock.yaml && yq e 'del(.neverBuiltDependencies)' -i pnpm-lock.yaml",
    "fbtee": "cd ares && if [ -d src ]; then pnpm fbt; else exit 0; fi",
    "format": "prettier --experimental-cli --write .",
    "preinstall": "command -v git >/dev/null 2>&1 && git config core.hooksPath git-hooks || exit 0",
    "lint": "eslint --cache .",
    "lint:format": "prettier --experimental-cli --cache --check .",
    "prisma": "cd artemis && pnpm prisma",
    "relay": "cd ares && if [ -d src ]; then pnpm relay-compiler; else exit 0; fi",
    "test": "npm-run-all --parallel tsc:check lint lint:format relay vitest:run",
    "test:ci": "pnpm npm-run-all --parallel tsc:check lint lint:format vitest:run-ci",
    "tsc:check": "tsc",
    "vitest:run": "CPUS=$(if uname -s | grep -q Darwin; then sysctl -n hw.ncpu; else nproc --all; fi); export VITEST_MAX_THREADS=$(($CPUS - 2)); export VITEST_MIN_THREADS=$(($CPUS - 2)); vitest run",
    "vitest:run-ci": "vitest run"
  },
  "nodemonConfig": {
    "ext": "tsx",
    "watch": [
      "apollo/",
      "artemis/",
      "athena/",
      "dionysus/",
      "hermes/",
      "i18n/",
      "zeus/"
    ]
  },
  "devDependencies": {
    "@babel/plugin-syntax-typescript": "^7.27.1",
    "@deities/eslint-plugin": "workspace:*",
    "@ianvs/prettier-plugin-sort-imports": "^4.7.0",
    "@nkzw/babel-preset-fbtee": "^1.7.0",
    "@nkzw/eslint-config": "^3.2.0",
    "@nkzw/eslint-plugin-fbtee": "^1.7.0",
    "@nkzw/pothos-locate": "^1.0.0",
    "@prettier/plugin-oxc": "^0.0.4",
    "@styled/typescript-styled-plugin": "^1.0.1",
    "@swc/core": "1.13.5",
    "@types/node": "^24.8.1",
    "@vitejs/plugin-react": "^5.0.4",
    "babel-plugin-react-compiler": "^1.0.0",
    "chalk": "^5.6.2",
    "dotenv": "^17.2.3",
    "eslint": "^9.37.0",
    "eslint-plugin-workspaces": "^0.11.0",
    "nodemon": "^3.1.10",
    "npm-run-all2": "^8.0.4",
    "prettier": "^3.6.2",
    "prettier-plugin-packagejson": "^2.5.19",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.3",
    "vite": "^7.1.10",
    "vitest": "^3.2.4"
  },
  "engines": {
    "node": ">=23.0.0",
    "pnpm": ">=9.0.1"
  }
}
